<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Oceny Łukasz</title>
    <!-- <script type="text/javascript" src="index.js"></script> -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- <link rel="stylesheet" href="style.css"> -->
    <script>
        const PING_TIMEOUT = 3000; // 3 seconds
        let ws = null;
        let interval = null;

        window.onbeforeunload = () => {
            ws.send(JSON.stringify({ event: "CLOSE", data: {} }));
        }

        function run_ws(name) {
            const URL = `wss://vulcan-websocket-api.herokuapp.com/users/${name}`;

            console.log("Starting websocket in 700ms...");
            setTimeout(() => {
                console.log("Starting websocket...");

                ws = new WebSocket(URL);

                interval = setInterval(() => {
                    ws.send(JSON.stringify({ event: "PING", data: {} }));
                }, PING_TIMEOUT);

                ws.onmessage = (message) => {
                    let raw_data = message.data;
                    let data = JSON.parse(raw_data);
                    console.log(data);
                    process_data(data);
                }

                ws.onerror = (event) => {
                    clearInterval(interval);
                }

                console.log("Successfully started websockets.");
            }, 700); // start the websocket connections after 700ms of loading the page
        }

        function process_data(payload) {
            if (payload.event == "MONEY") {
                build_money_table(payload.data);
            } else if (payload.event == "GRADES") {
                build_grades_table(payload.data);
            } else if (payload.event == "TOTAL_MONEY") {
                build_total_money(payload.data);
            } else if (payload.event == "READY") {
                setTimeout(() => {
                    $(".loader-wrapper").fadeOut("slow");
                }, 500)
            }
        }

        function filter_date() {
            let date = document.getElementById("filter-date").value;
            let data = { event: "FILTER_DATE", data: { "after": date } };
            ws.send(JSON.stringify(data));
        }

        function reset_date() {
            document.getElementById("filter-date").value = "";
            let data = { event: "RESET_FILTER_DATE", data: {} }
            ws.send(JSON.stringify(data));
        }

        function build_total_money(data) {
            let value = data["total_money"];
            document.getElementById("total-money-pln").innerHTML = value + " zł";
        }

        function build_money_table(data) {
            $("#money-table tr").remove(); // remove all rows from table    

            let height = 0;
            // Calculate no. of rows
            for (let value of Object.values(data)) {
                if (value.length > height) {
                    height = value.length;
                }
            }

            let table = document.getElementById("money-table");

            // Create head
            let thead = table.tHead;
            let trow = thead.insertRow();
            for (let subject of Object.keys(data)) {
                let th = document.createElement("th");
                let text = document.createTextNode(subject);
                th.appendChild(text);
                trow.appendChild(th);
            }

            // Create body
            let raw_rows = [];
            let arrays = Object.values(data);
            for (let i = 0; i < height; i++) {
                let row = [];
                for (let elem of arrays) {
                    row.push(elem[i]);
                }
                raw_rows.push(row);
            }

            for (let values of Object.values(raw_rows)) {
                let row = table.insertRow();
                for (let grade of values) {
                    if (grade == null) {
                        grade = "";
                    }

                    let cell = row.insertCell();
                    let text = document.createTextNode(grade);
                    cell.appendChild(text);
                }
            }
        }

        function build_grades_table(data) {
            $("#grades-table tr").remove(); // remove all rows from table    

            let height = 0;
            // Calculate no. of rows
            for (let value of Object.values(data)) {
                if (value.length > height) {
                    height = value.length;
                }
            }

            let table = document.getElementById("grades-table");

            // Create head
            let thead = table.tHead;
            let trow = thead.insertRow();
            for (let subject of Object.keys(data)) {
                let th = document.createElement("th");
                let text = document.createTextNode(subject);
                th.appendChild(text);
                trow.appendChild(th);
            }
            // Create body
            let raw_rows = [];
            let arrays = Object.values(data);
            for (let i = 0; i < height; i++) {
                let row = [];
                for (let elem of arrays) {
                    row.push(elem[i]);
                }
                raw_rows.push(row);
            }

            for (let values of Object.values(raw_rows)) {
                let row = table.insertRow();
                for (let grade of values) {
                    if (grade == null) {
                        grade = "";
                    }

                    let cell = row.insertCell();
                    let text = document.createTextNode(grade);
                    cell.appendChild(text);
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,500;1,300;1,400;1,500&display=swap');

        body {
            font-family: 'Roboto', 'Courier New', Courier, monospace;
            overflow: hidden;
            background-color: #22333B;
        }

        .content {
            z-index: 1000;
        }

        .tables {
            table-layout: fixed;
            width: 95vw;
            margin: 0 auto;
            text-align: center;
            vertical-align: middle;
            border-collapse: collapse;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        }

        .tables,
        .tables th,
        .tables td {
            font-style: italic;
            font-size: 0.7vw;
            font-weight: 500;
        }

        .tables th {
            background-color: #ddd;
        }

        .tables td {
            background-color: #ccc;
        }

        #oceny-imie {
            text-align: center;
            font-style: italic;
            font-weight: 400;
            color: #ccc;
        }

        #money-table {
            width: 95vw;
            position: fixed;
            margin-left: -47.5vw;
            top: 55%;
            left: 50%;
        }

        .filter-table-wrapper {
            color: #ccc;
            position: fixed;
            top: 5%;
            left: 2.6%;
            font-weight: 500;
        }

        .filter-table-wrapper label {
            font-style: italic;
            margin-right: 18px;
        }

        .filter-table-wrapper input {
            font-style: italic;
        }

        .filter-table-wrapper button {
            font-style: italic;
        }

        .total-money-wrapper {
            font-style: italic;
            font-size: 23px;
            color: #ccc;
        }

        .total-money-wrapper #total-money-text {
            top: 90%;
            position: fixed;
            left: 2.6%;
        }

        .total-money-wrapper #total-money-pln {
            top: 90%;
            position: fixed;
            left: 200px;
        }

        .loader-wrapper {
            z-index: 1;
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background-color: #22333B;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .loader {
            display: inline-block;
            width: 30px;
            height: 30px;
            position: relative;
            border: 4px solid #Fff;
            animation: loader 2s infinite ease;
        }

        .loader-inner {
            vertical-align: top;
            display: inline-block;
            width: 100%;
            background-color: #fff;
            animation: loader-inner 2s infinite ease-in;
        }

        @keyframes loader {
            0% {
                transform: rotate(0deg);
            }

            25% {
                transform: rotate(180deg);
            }

            50% {
                transform: rotate(180deg);
            }

            75% {
                transform: rotate(360deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes loader-inner {
            0% {
                height: 0%;
            }

            25% {
                height: 0%;
            }

            50% {
                height: 100%;
            }

            75% {
                height: 100%;
            }

            100% {
                height: 0%;
            }
        }
    </style>
</head>

<body onload="run_ws('lukasz')">
    <div class="loader-wrapper">
        <span class="loader"><span class="loader-inner"></span></span>
    </div>

    <div class="content">
        <h1 id="oceny-imie">Oceny Łukasz</h1>

        <div class="filter-table-wrapper">
            <label for="filter-date">Filter after: </label>
            <input type="text" name="filter-date" id="filter-date" placeholder="DD/MM/YYYY"
                pattern="\d{2}\/\d{2}\/\d{2,4}">
            <button onclick="filter_date()">filter</button>
            <button onclick="reset_date()">reset</button>
        </div>


        <div class="table-wrapper">
            <table id="grades-table" class="tables" border="thin">
                <thead class="thead-light"></thead>
                <tbody></tbody>
            </table>
        </div>

        <div class="table-wrapper">
            <table id="money-table" class="tables" border="thin">
                <thead class="thead-light"></thead>
                <tbody></tbody>
            </table>
        </div>

        <div class="total-money-wrapper">
            <p id="total-money-text">Total money: </p>
            <p id="total-money-pln"></p>
        </div>
    </div>
</body>

</html>